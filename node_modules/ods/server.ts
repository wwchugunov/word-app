/// <reference path="./typings/node/node.d.ts"/>
/// <reference path="./typings/socket.io/socket.io.d.ts"/>

export interface IServerHandlerSubscription {
	close() : void;
}

export interface IServerHandlerSession {
	get(id : string, properties : any, callback : (data : any) => void) : void;
	put(id : string, properties : any, value: any, callback : () => void) : void;
	sub(id : string, properties : any, callback : (data : any) => void) : IServerHandlerSubscription;
	destroy() : void;
}

export interface IServerHandler {
	create() : IServerHandlerSession;
}

export class Server {
    public constructor(public server : SocketIO.Server, public handler : IServerHandler) {
		this.server.on("connection", function (socket) {
			new ServerConnection(socket, this.handler);
		});
	}
}

class IClientMessage {
	method : string;
	correlation : number;
	id : string;
	properties : any;
	data : any;
}

class ServerMessage {
	constructor(public correlation : number, public data : any) {
	}
}

class ServerConnection {
	private session : IServerHandlerSession;
	 
	private subscriptions : { [correlation: number]: IServerHandlerSubscription; };
		 
	public constructor(public socket: SocketIO.Socket, public handler : IServerHandler) {
		this.session = handler.create();
		this.subscriptions = {};
		this.socket.on("disconnect", this.onDisconnect)
		this.socket.on("Ods", this.onMessage);
	}
	
	private onDisconnect(socket : SocketIO.Socket) : void {
		for (var subscription in this.subscriptions) {
			this.subscriptions[subscription].close();
		}

		this.session.destroy();
	}
	
	private onMessage(message : IClientMessage) : void {
		switch (message.method) {
			case "get":
				this.onMessageGet(message);
				break;
			case "put":
				this.onMessagePut(message);
				break;
			case "sub":
				this.onMessageSub(message);
				break;
			case "unsub":
				this.onMessageUnsub(message);
				break;
		}
	}
	
	private onMessageGet(message : IClientMessage) {
		this.session.get(message.id, message.data, function (data) {
			var response = new ServerMessage(message.correlation, data); 
			this.socket.emit("Ods", response);
		});
	}
	
	private onMessagePut(message : IClientMessage) {
		this.session.put(message.id, message.properties, message.data, function () {
			var response = new ServerMessage(message.correlation, null); 
			this.socket.emit("Ods", response);
		});
	}

	private onMessageSub(message : IClientMessage) {
		this.subscriptions[message.correlation] = this.session.sub(message.id, message.data, function (data) {
			var update = new ServerMessage(message.correlation, data); 
			this.socket.emit("Ods", update);
		});
	}

	private onMessageUnsub(message : IClientMessage) {
		this.subscriptions[message.correlation].close();
		delete this.subscriptions[message.correlation];
	}
}

