/// <reference path="./typings/node/node.d.ts"/>
/// <reference path="./server.ts"/>

require("typescript-require");

import server = require("./server.ts");

export interface IDocumentSubscription {
	close() : void;
}

export interface IDocument {
	id : string;
	get(properties : any, callback : (data : any) => void) : void;
	put(properties : any, value : any, callback : (data : any) => void) : void;
	sub(listener : (document : IDocument) => void) : IDocumentSubscription;
}

export class ServerHandler implements server.IServerHandler {
	private documents : { [id : string] : IDocument }
	
	public add(document : IDocument) {
		this.documents[document.id] = document;
	}
	
	public get(id : string, properties : any, callback : (data : any) => void) : void {
		var document = this.documents[id];
		
		if (document != null) {
			document.get(properties, callback);
		}
		else {
			callback(null);
		}
	}
	
	public put(id : string, properties : any, value : any, callback : (data : any) => void) : void {
		var document = this.documents[id];
		
		if (document != null) {
			document.put(properties, value, callback);
		}
		else {
			callback(null);
		}
	}
	
	public sub(id : string, properties : any, callback : (data : any) => void) : server.IServerHandlerSubscription {
		var document = this.documents[id];
		
		if (document != null) {
			return new ServerHandlerSubscription(document, properties, callback);
		}
		else {
			callback(null);
		}
	}

	// IServerHandler
	
	public create() : server.IServerHandlerSession {
		return new ServerHandlerSession(this);
	}
	
}

class ServerHandlerSession implements server.IServerHandlerSession {
	
	constructor(private handler : ServerHandler) {
	} 
	
	// IServerHandlerSession

	public get(id : string, properties : any, callback : (data : any) => void) : void {
		this.handler.get(id, properties, callback);
	}
	
	public put(id : string, properties : any, value: any, callback : () => void) : void {
		this.handler.put(id, properties, value, callback);
	}
	
	public sub(id : string, properties : any, callback : (data : any) => void) : server.IServerHandlerSubscription {
		return this.handler.sub(id, properties, callback);
	}
	
	public destroy() : void {
	}
}

class ServerHandlerSubscription implements server.IServerHandlerSubscription {
	
	private subscription : IDocumentSubscription;
	 
	constructor(private document : IDocument, private properties : any, private callback : (data : any) => void) {
		this.subscription = document.sub(this.update)
	}
	
	private update(document : IDocument) : void {
		document.get(this.properties, this.callback);
	}
	
	// IServerHandlerSubscription
	
	public close() : void {
		this.subscription.close();
	}
}
