/// <reference path="./typings/socket.io/socket.io.client.d.ts"/>

module  Ods {
	export interface IClient {
		get<T>(id : string, properties : any, callback : (id : string, properties : any, value : T) => void) : void;
		put<T>(id : string, properties : any, value : T, callback : (id : string, properties : any) => void) : void;
		sub<T>(id : string, properties : any, callback : (id : string, properties : any, value : T) => void) : IClientSubscription;
	}
	
	export interface IClientSubscription {
		close() : void;
	}
	
	export class Client implements IClient {
		
		private sequence : number;
		private callbacks : { [correlation: number] : ClientCorrelation; };
		
	    public constructor(public socket : Socket) {
			this.sequence = 1;
			this.callbacks = {};
			this.socket.on("", this.receive);
		}
		
		private receive(message : IServerMessage) {
			this.correlateMessage(message.data);
		}
		
		private send(message : ClientMessage) {
			this.socket.emit("", message);
		}
		
		private correlateMessage(message : IServerMessage) {
			var correlation = this.callbacks[message.correlation];
			
			if (correlation != null) {
				if (correlation.remove) {
					this.removeCorrelation(message.correlation);
				}
				
				correlation.invoke(message.data);
			}
		}
		
		private removeCorrelation(correlation : number) {
			delete this.callbacks[correlation];
			var message = new ClientMessage("unsub", correlation, null, null, null);
			this.send(message);
		}
		
		private createCorrelation<T>(id : string, properties : any, callback : (id : string, properties : any, value : any) => void, remove : boolean) : number {
			var correlation = this.sequence++;
			this.callbacks[correlation] = new ClientCorrelation(id, properties, callback, remove);
			return correlation;
		}
		
		public get<T>(id : string, properties : any, callback : (id: string, properties : any, value : T) => void) : void {
			var correlation = this.createCorrelation(id, properties, callback, true);
			var message = new ClientMessage("get", correlation, id, properties, null);
			this.send(message);
		}
		
		public put<T>(id : string, properties : any, value : T, callback : (id : string, properties : any, value : T) => void) : void {
			var correlation = this.createCorrelation(id, properties, callback, true);
			var message = new ClientMessage("put", correlation, id, properties, value);
			this.send(message);
		}
		
		public sub<T>(id : string, properties : any, callback : (id : string, properties : any, value : T) => void) : IClientSubscription {
			var correlation = this.createCorrelation(id, properties, callback, false);
			var subscription = new ClientSubscription(correlation, this.removeCorrelation);
			var message = new ClientMessage("sub", correlation, id, properties, null);
			this.send(message);
			return subscription;
		}
	}
	
	interface IServerMessage {
		correlation: number;
		data: any;
	}
	
	class ClientMessage {
		constructor(public method: string, public correlation: number, public id: string, public properties : any, public data: any) {
		}
	}
	
	class ClientCorrelation {
		constructor(public id: string, public properties: any, public callback: (id: string, properties: any, value: any) => void, public remove: boolean) {
		}
		
		invoke(value: any) : void {
			this.callback(this.id, this.properties, value);
		}
	}
	
	class ClientSubscription implements IClientSubscription {
		constructor(private correlation : number, private remove : (correlation : number) => void) {	
		}
		
		close() {
			this.remove(this.correlation);
		}
	}  	
}