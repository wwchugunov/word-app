/// <reference path="./typings/node/node.d.ts"/>
/// <reference path="./server.handler.ts"/>

require("typescript-require");

import handler = require("./server.handler.ts");

export class Document implements handler.IDocument {
	private index : number;
	private subscriptions : { [index : number] : DocumentSubscription};
	 
	constructor(public id : string, private value : any) {
		this.index = 0;
		this.subscriptions = {};
	}
	
	public update(value : any) {
		this.value = value;
		
		for (var subscription in this.subscriptions) {
			this.subscriptions[subscription].update(value);
		}
	}
	
	// IDocument
	
	public get(properties : any, callback : (data : any) => void) : void {
		
	}
	
	public put(properties : any, value : any, callback : (data : any) => void) : void {
		
	}
	
	public sub(listener : (document : handler.IDocument) => void) : handler.IDocumentSubscription {
		var index = this.index;
		
		var subscription = new DocumentSubscription(listener, function () {
			delete this.subscribers[index];
		});

		this.subscriptions[index] = subscription;
		
		this.index++;
		
		subscription.update(this.value);
		
		return subscription; 
	}
}

class DocumentSubscription implements handler.IDocumentSubscription {
	
	constructor(private listener : (document : handler.IDocument) => void, private callback : () => void) {
	}
	
	public update(value : any) : void {
		this.listener(value);
	}
	
	// IDocumentSubscription
	
	public close() : void {
		this.callback();
	}
}
